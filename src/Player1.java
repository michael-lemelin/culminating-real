
import java.util.Random;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author milem5601
 */
public class Player1 extends javax.swing.JFrame {

    
    
    // Variables
    static int userPoints;
    static int compPoints;
    static int compChoice;
    static int playedGames; // Stores number of games played 
    
    static int [] winners = new int [2]; // Stores amount of times user/comp wins
    
    
    public Player1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rockBtn = new javax.swing.JButton();
        paperBtn = new javax.swing.JButton();
        scissorsBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        computerMove = new javax.swing.JLabel();
        compMoveLbl = new javax.swing.JLabel();
        gameResultLbl = new javax.swing.JLabel();
        userScore = new javax.swing.JLabel();
        compScore = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 207));

        jLabel1.setFont(new java.awt.Font("Lithos Pro Regular", 0, 24)); // NOI18N
        jLabel1.setText("One Player");

        jLabel2.setFont(new java.awt.Font("Lithos Pro Regular", 1, 11)); // NOI18N
        jLabel2.setText("Your move:");

        rockBtn.setText("Rock");
        rockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rockBtnActionPerformed(evt);
            }
        });

        paperBtn.setText("Paper");
        paperBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperBtnActionPerformed(evt);
            }
        });

        scissorsBtn.setText("Scissors");
        scissorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scissorsBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lithos Pro Regular", 1, 11)); // NOI18N
        jLabel3.setText("Computer move:");

        computerMove.setFont(new java.awt.Font("Lithos Pro Regular", 0, 11)); // NOI18N

        compMoveLbl.setFont(new java.awt.Font("Lithos Pro Regular", 0, 11)); // NOI18N
        compMoveLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        gameResultLbl.setFont(new java.awt.Font("Lithos Pro Regular", 0, 24)); // NOI18N
        gameResultLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        userScore.setFont(new java.awt.Font("Lithos Pro Regular", 0, 11)); // NOI18N
        userScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userScore.setText("Your score:");

        compScore.setFont(new java.awt.Font("Lithos Pro Regular", 0, 11)); // NOI18N
        compScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        compScore.setText("computer score:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(rockBtn)
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(paperBtn)
                                .addGap(49, 49, 49)
                                .addComponent(scissorsBtn))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(compMoveLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(computerMove, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(gameResultLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(compScore, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(userScore, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paperBtn)
                    .addComponent(rockBtn)
                    .addComponent(scissorsBtn))
                .addGap(39, 39, 39)
                .addComponent(jLabel3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(computerMove, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compMoveLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addComponent(gameResultLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userScore, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compScore, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * @param n1
     * @param n2 
     */
    
    // Rock Button Method
    public void pointCheckRock (int n1) {
     
        
        int compMove = n1;
        
        // 1 = rock, 2 = paper, 3 = scissors
           
        // Tie game 
        if (compMove == 1) {
            
            compMoveLbl.setText("Rock");
            gameResultLbl.setText("Tie!");
                
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
            
        // Computer wins
        if (compMove == 2) {
                
            compMoveLbl.setText("Paper");
            gameResultLbl.setText("Computer Wins!");
            compPoints = compPoints + 1;
                
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
            
        // Computer loses
        if (compMove == 3) {
                
            compMoveLbl.setText("Scissors");
            gameResultLbl.setText("You Win!");
            userPoints = userPoints + 1;
                
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
    }
    
    /**
     * 
     * @param n1 
     */
    
    // Paper Button method
    public void pointCheckPaper (int n1) {
     
        
        int compMove = n1;
        
        // 1 = rock, 2 = paper, 3 = scissors
           
        // Computer loses... if comp choses rock, set labels and add 1 to player points 
        if (compMove == 1) {
            
            compMoveLbl.setText("Rock");
            gameResultLbl.setText("You Win!");
            userPoints = userPoints + 1;  
            
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
            
        // Tie... set labels
        if (compMove == 2) {
                
            compMoveLbl.setText("Paper");
            gameResultLbl.setText("Tie!");
                
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
            
        // Player loses... if comp choses paper, set appropriate labels and add 1 to comp points
        if (compMove == 3) {
                
            compMoveLbl.setText("Scissors");
            gameResultLbl.setText("Computer Wins!");
            compPoints = compPoints + 1;
            
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
    }
    
    /**
     * 
     * @param n1 
     */
    
    // Scissors Button method
    public void pointCheckScissors (int n1) {
     
        
        int compMove = n1;
        
        // 1 = rock, 2 = paper, 3 = scissors
           
        // Computer wins... if comp choses rock, set labels and add 1 to comp points 
        if (compMove == 1) {
            
            compMoveLbl.setText("Rock");
            gameResultLbl.setText("Computer Wins!");
                
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
            
            compPoints = compPoints + 1;
        }
            
        // Comp loses... set labels and add one to player score
        if (compMove == 2) {
                
            compMoveLbl.setText("Paper");
            gameResultLbl.setText("You Win!");
            userPoints = userPoints + 1;    
            
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
            
        // Tie... set labels
        if (compMove == 3) {
                
            compMoveLbl.setText("Scissors");
            gameResultLbl.setText("Tie!");
            
            userScore.setText("Your Score: " + userPoints);
            compScore.setText("Computer Score: " + compPoints);
        }
    }
    
    
    
    private void rockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rockBtnActionPerformed
        
        // See if either player or computer won... if no winners computer chooses its move
        if ((userPoints != 3) && (compPoints != 3)) {
             
            // Computer chooses its move
            Random rn = new Random();

            for(int i = 0; i < 1; i = i + 1) {
            
                compChoice = rn.nextInt(3) + 1;
                System.out.println(compChoice);
            }
            
        }
        
        // If user score = 3, user Wins
        if (userPoints == 2) {
            
            this.setVisible(false);
            new userWinFrm().setVisible(true);
            
            winners [0] = winners [0] + 1; // Adds 1 to games player won
            
            playedGames = playedGames + 1; // Adds 1 to total games played
        }
        
        // If comp score = 3, comp wins
        if (compPoints == 2) {
            
            this.setVisible(false);
            new compWinFrm().setVisible(true);
            
            winners [1] = winners [1] + 1; // Adds 1 to games comp won
            
            playedGames = playedGames + 1;
        }
            
        pointCheckRock (compChoice); // Sends Computer choice to method
           
        
       
        
        
        
    }//GEN-LAST:event_rockBtnActionPerformed

    private void paperBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperBtnActionPerformed
        
        if ((userPoints != 3) && (compPoints != 3)) {
             
            // Computer chooses its move
            Random rn = new Random();

            for(int i = 0; i < 1; i = i + 1) {
            
                compChoice = rn.nextInt(3) + 1;
                System.out.println(compChoice);
            }
            
        }
        
        // If user score = 3, user Wins
        if (userPoints == 2) {
            
            this.setVisible(false);
            new userWinFrm().setVisible(true);
            
            winners [0] = winners [0] + 1;
            
            playedGames = playedGames + 1;
        }
        
        // If comp score = 3, comp wins
        if (compPoints == 2) {
            
            this.setVisible(false);
            new compWinFrm().setVisible(true);
            
            winners [1] = winners [1] + 1;
            
            playedGames = playedGames + 1;
        }
            
        pointCheckPaper (compChoice);
    }//GEN-LAST:event_paperBtnActionPerformed

    private void scissorsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scissorsBtnActionPerformed
        
         if ((userPoints != 3) && (compPoints != 3)) {
             
            // Computer chooses its move
            Random rn = new Random();

            for(int i = 0; i < 1; i = i + 1) {
            
                compChoice = rn.nextInt(3) + 1;
                System.out.println(compChoice);
            }
            
        }
        
         // If user score = 3, user Wins
        if (userPoints == 2) {
            
            this.setVisible(false);
            new userWinFrm().setVisible(true);
            
            winners [0] = winners [0] + 1;
            
            playedGames = playedGames + 1;
        }
        
        // If comp score = 3, comp wins
        if (compPoints == 2) {
            
            this.setVisible(false); 
            new compWinFrm().setVisible(true); 
            
            winners [1] = winners [1] + 1;
            
            playedGames = playedGames + 1;
        }
            
        pointCheckScissors (compChoice); // Sends Computer choice and user choice to method
    }//GEN-LAST:event_scissorsBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Player1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Player1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Player1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Player1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Player1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel compMoveLbl;
    private javax.swing.JLabel compScore;
    private javax.swing.JLabel computerMove;
    private javax.swing.JLabel gameResultLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton paperBtn;
    private javax.swing.JButton rockBtn;
    private javax.swing.JButton scissorsBtn;
    private javax.swing.JLabel userScore;
    // End of variables declaration//GEN-END:variables
}
